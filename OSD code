// Included Libraries //////////////////////////////////////////////////////////

  #include <SPI.h>
  #include <MAX7456.h>
  #include <SoftwareSerial.h>
  #include <SimpleDHT.h>




// Pin Mapping /////////////////////////////////////////////////////////////////
  
  // pinValue = 0 means "not connected"

  //  FDTI Basic 5V                   ---  Arduino  VCC      (AVCC,VCC)
  //  FDTI Basic GND                  ---  Arduino  GND      (AGND,GND)
  //  FDTI Basic CTS                  ---  Arduino  GND      (AGND,GND)
  //  FDTI Basic DTR                  ---  Arduino  GRN
  //  FDTI Basic TXO                  ---> Arduino  TXO [PD0](RXD)
  //  FDTI Basic RXI                 <---  Arduino  RXI [PD1](TXD)
  
  
  //  Max7456 +5V   [DVDD,AVDD,PVDD]  ---  Arduino  VCC      (AVCC,VCC)
  //  Max7456 GND   [DGND,AGND,PGND]  ---  Arduino  GND      (AGND,GND)
  //  Max7456 CS    [~CS]            <---  Arduino  10  [PB2](SS/OC1B)
  //  Max7456 CS    [~CS]            <---  Mega2560 43  [PL6]
  const byte osdChipSelect             =            10;
  //  Max7456 DIN   [SDIN]           <---  Arduino  11  [PB3](MOSI/OC2)
  //  Max7456 DIN   [SDIN]           <---  Mega2560 51  [PB2](MOSI)
  const byte masterOutSlaveIn          =                      MOSI;
  //  Max7456 DOUT  [SDOUT]           ---> Arduino  12  [PB4](MISO)
  //  Max7456 DOUT  [SDOUT]           ---> Mega2560 50  [PB3](MISO)
  const byte masterInSlaveOut          =                      MISO;
  //  Max7456 SCK   [SCLK]           <---  Arduino  13  [PB5](SCK)
  //  Max7456 SCK   [SCLK]           <---  Mega2560 52  [PB1](SCK)
  const byte slaveClock                =                      SCK;
  //  Max7456 RST   [~RESET]          ---  Arduino  RST      (RESET)
  const byte osdReset                  =            0;
  //  Max7456 VSYNC [~VSYNC]          -X-
  //  Max7456 HSYNC [~HSYNC]          -X-
  //  Max7456 LOS   [LOS]             -X-

        //Sensor pinmapping
SimpleDHT22 dht22;

int mq2Value, mq4Value, mq7Value, mq135Value;
int mq2PIN = 0, mq4PIN = 1, mq7PIN = 2, mq135PIN = 3;




// Global Macros ///////////////////////////////////////////////////////////////





// Global Constants ////////////////////////////////////////////////////////////

  const unsigned long debugBaud = 9600;         // Initial serial baud rate for 
                                                //   Debug PC interface
  




// Global Variables ////////////////////////////////////////////////////////////
  
  HardwareSerial Debug = Serial;                // Set debug connection
  
  MAX7456 OSD( osdChipSelect );





// Hardware Setup //////////////////////////////////////////////////////////////

  void setup() 
  {
    pinMode(mq2PIN, INPUT);
    pinMode(mq4PIN, INPUT);
    pinMode(mq7PIN, INPUT);
    pinMode(mq135PIN, INPUT);

    
    unsigned char system_video_in=NULL;  
    // Initialize the Serial connection to the debug computer:
    Debug.begin( debugBaud );
    
    
    // Initialize the SPI connection:
    SPI.begin();
    SPI.setClockDivider( SPI_CLOCK_DIV2 );      // Must be less than 10MHz.
    
    // Initialize the MAX7456 OSD:
    OSD.begin();                                // Use NTSC with default area.
    //OSD.setCharEncoding( MAX7456_ASCII );       // Only needed if ascii font.
    
    system_video_in=OSD.videoSystem();
    if(NULL!=system_video_in)
    {
        OSD.setDefaultSystem(system_video_in) ;
    }
    else
    {
        OSD.setDefaultSystem(MAX7456_NTSC) ;
    }
    
    OSD.display();                              // Activate the text display.
    
  }
  // setup()





// Main Code ///////////////////////////////////////////////////////////////////

  void loop() 
  {
    
    // Display screen saver until imput is recieved:
    byte          system     = NULL;
    float         angle      = 0.0;
    float         col        = 0.0;
    float         row        = 0.0;
    float         brightness = 0.0;
    byte          textmode   = 0;

    OSD.setTextOffset( MAX7456_HOS_MAX, 0 );    // Set initial offset.
    writeScreenSaver();                         // Write screen.

while (!DataSource.available()) 
  {
    while (OSD.notInVSync());                   // Wait for VSync to start to 
                                                //   prevent write artifacts.
                                                                                    
      // MQ2 SENSOR
    mq2Value = analogRead(mq2PIN);
    if (mq2Value > 500)
    {
    OSD.print("Smoke Detected!");
    }
    
      // MQ4 SENSOR                  
    mq4Value = analogRead(mq4PIN);
    if (mq4Value > 250)
    {
    OSD.print("Methane Detected!");
    }
      // MQ7 SENSOR               
    mq7Value = analogRead(mq7PIN);
    if (mq7Value > 500)
    {
    OSD.print("Carbon Monoxide Detected!");
    }

      // MQ135 SENSOR                
    mq135Value = analogRead(mq135PIN);
    if (mq135Value > 500)
    {
    OSD.print("Carbon Dioxide Detected!");
    }
  
      //DHT22 Sensor 
    byte temperature = 0;
    byte humidity = 0;
    if (dht22.read(pinDHT22, &temperature, &humidity, NULL))
    {
    return;
    }
    Serial.print((int)humidity); 
    Serial.print(" %");
    Serial.print((int)temperature);
    Serial.print(" Â°C");
    delay(5000);
    while (true);
    
  } 
  // loop()
